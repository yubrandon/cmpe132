# -*- coding: utf-8 -*-
"""CMPE_132.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1d_4haYSHs2gqtytJVIm4i5hIAg-Hs6g4
"""

from google.colab import drive
drive.mount('/content/drive')

import pandas as pd

path = "/content/drive/Shareddrives/CMPE 132_Nerd Squad/MSCAD.csv"
df = pd.read_csv(path)
print(df.shape)
print(df.head())

# Check unique values in Label column
print(df["Label"].unique())  # Make sure the column contains expected values

# Filter the dataset
df_filtered = df[df["Label"].isin(["HTTP_DDoS", "Normal"])]

# Confirm the filtering
print(df_filtered["Label"].value_counts())  # Verify class distribution
print(df_filtered.shape)  # Check number of remaining rows

from sklearn.preprocessing import StandardScaler

# Convert all applicable columns to numeric (ignoring errors)
df_filtered = df_filtered.apply(pd.to_numeric, errors='ignore')

# Select only numeric columns (excluding the Label column)
numeric_cols = df_filtered.select_dtypes(include=['float64', 'int64']).columns
print(numeric_cols)  # Check which columns are selected

# Normalize the numeric features
scaler = StandardScaler()
df_filtered[numeric_cols] = scaler.fit_transform(df_filtered[numeric_cols])

# Check the transformed dataset
print(df_filtered.head())

from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder
from sklearn.metrics import accuracy_score, classification_report

# Separate features and target variable
X = df_filtered[numeric_cols]  # Features
y = df_filtered["Label"]  # Labels

# Encode labels as numbers (Normal -> 0, HTTP DDoS -> 1)
label_encoder = LabelEncoder()
y = label_encoder.fit_transform(y)

# Split into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Confirm dataset shapes
print("Training set:", X_train.shape, y_train.shape)
print("Test set:", X_test.shape, y_test.shape)

# SVN
from sklearn.svm import SVC

# Create the SVM model
svm_model = SVC(kernel='rbf', C=1.0, gamma='scale')  # RBF is the default kernel

# Train the model
svm_model.fit(X_train, y_train)

# Make predictions
svm_preds = svm_model.predict(X_test)

# Evaluate
print("SVM Results:")
print("Accuracy:", accuracy_score(y_test, svm_preds))
print(classification_report(y_test, svm_preds, target_names=label_encoder.classes_))

#Random Forest
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score, classification_report

# Train the model
clf = RandomForestClassifier(n_estimators=100, random_state=42)
clf.fit(X_train, y_train)

# Predict on the test set
y_pred = clf.predict(X_test)

# Evaluate performance
print("Accuracy:", accuracy_score(y_test, y_pred))
print(classification_report(y_test, y_pred, target_names=label_encoder.classes_))

#CNN

from google.colab import drive
import pandas as pd
from sklearn.preprocessing import StandardScaler, LabelEncoder
from sklearn.model_selection import train_test_split
from sklearn.metrics import classification_report
import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers

# Mount Google Drive
drive.mount('/content/drive')

# Load dataset
path = "/content/drive/Shareddrives/CMPE 132_Nerd Squad/MSCAD.csv"
df = pd.read_csv(path)

df = df[df["Label"].isin(["HTTP_DDoS", "Normal"])]

df = df.apply(pd.to_numeric, errors='ignore')

numeric_cols = df.select_dtypes(include=['float64', 'int64']).columns

scaler = StandardScaler()
df[numeric_cols] = scaler.fit_transform(df[numeric_cols])

X = df[numeric_cols].values
y = df["Label"].values

label_encoder = LabelEncoder()
y = label_encoder.fit_transform(y)

X_train, X_test, y_train, y_test = train_test_split(
    X, y, test_size=0.2, random_state=42, stratify=y
)

X_train = X_train.reshape(X_train.shape[0], X_train.shape[1], 1)
X_test = X_test.reshape(X_test.shape[0], X_test.shape[1], 1)

model = keras.Sequential([
    layers.Input(shape=(X_train.shape[1], 1)),
    layers.Conv1D(32, 3, activation='relu'),
    layers.MaxPooling1D(2),
    layers.Conv1D(64, 3, activation='relu'),
    layers.MaxPooling1D(2),
    layers.Flatten(),
    layers.Dense(128, activation='relu'),
    layers.Dropout(0.5),
    layers.Dense(1, activation='sigmoid')
])

model.compile(optimizer='adam',
              loss='binary_crossentropy',
              metrics=['accuracy'])

model.fit(X_train, y_train, epochs=10, batch_size=32, validation_split=0.1)

loss, accuracy = model.evaluate(X_test, y_test)
print(f"\nTest Loss: {loss:.4f}")
print(f"Test Accuracy: {accuracy:.4f}")

y_pred_prob = model.predict(X_test)
y_pred = (y_pred_prob > 0.5).astype(int)

print("\nClassification Report:")
print(classification_report(y_test, y_pred, target_names=label_encoder.classes_))
